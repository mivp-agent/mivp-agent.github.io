{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MOOS-IvP Agent Overview Model agnostic ML tooling for MOOS-IvP . Inspired by moos-ivp-pLearn this project was designed to allow for training of python ML agents for Project Aquaticus while also providing generalized software to use with any MOOS-IvP project. Note This project is still very young. As such feel free to any ask questions not answered by the documentation via a github issues. . There, you can also see the current backlog. Bellow you can see an example MOOS-IvP mission AgentAquaticus based on Project Aquaticus . The agents being trained are rewarded by successfully grabbing and returning a flag protected by robots which circle it. The agent's actions are being determined by q-table written in NumPy . Installation This project currently supports both OSX and Linux operating systems. See the main README. README Pretty Please PLEASE Raise a GitHub issue if there is ~any~ issue with these instructions. Getting Started See the getting started page to start you on your ML path. Getting Started","title":"Home"},{"location":"#moos-ivp-agent","text":"","title":"MOOS-IvP Agent"},{"location":"#overview","text":"Model agnostic ML tooling for MOOS-IvP . Inspired by moos-ivp-pLearn this project was designed to allow for training of python ML agents for Project Aquaticus while also providing generalized software to use with any MOOS-IvP project. Note This project is still very young. As such feel free to any ask questions not answered by the documentation via a github issues. . There, you can also see the current backlog. Bellow you can see an example MOOS-IvP mission AgentAquaticus based on Project Aquaticus . The agents being trained are rewarded by successfully grabbing and returning a flag protected by robots which circle it. The agent's actions are being determined by q-table written in NumPy .","title":"Overview"},{"location":"#installation","text":"This project currently supports both OSX and Linux operating systems. See the main README. README Pretty Please PLEASE Raise a GitHub issue if there is ~any~ issue with these instructions.","title":"Installation"},{"location":"#getting-started","text":"See the getting started page to start you on your ML path. Getting Started","title":"Getting Started"},{"location":"getting_started/","text":"Getting Started Note This page is currently under construction Currently the best way of getting started is to: Look at the examples from the main repository See bellow for suggestions on which examples to focus on depending on your background While going through examples, reference the following two pages Python API for building models MOOS-IvP Reference for configuring new missions Python API MOOS-IvP Reference If you are coming from MOOS-IvP I would recommend looking at the \"ManagerExample\" and look at the configuration blocks for the BHV_Agent . This behavior is one that does the actual connection to python land through a TCP socket. ManagerExample Then, focus on the python side of the more complex \"QTable\" mission bellow. If you said \"What is MOOS-IvP\" Look at the \"QTable\" example. This implements a reinforcement learning q-table . This example is trained on the Project Aquaticus scenario. It's goal is to grab a flag in virtual game of capture flag. QTable If you came from the MOOS-IvP section: The associated MOOS-IvP mission files which are in that directory are based on the moos-ivp-agent's AgentAquaticus which allows for spawning of multiple vehicles in one MOOS-IvP simulation during training time. A good config block to look at is that for pEpisodeManager which manages the resetting of vehicles to form episodes of training. Hi Joe","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"Note This page is currently under construction Currently the best way of getting started is to: Look at the examples from the main repository See bellow for suggestions on which examples to focus on depending on your background While going through examples, reference the following two pages Python API for building models MOOS-IvP Reference for configuring new missions Python API MOOS-IvP Reference","title":"Getting Started"},{"location":"getting_started/#if-you-are-coming-from-moos-ivp","text":"I would recommend looking at the \"ManagerExample\" and look at the configuration blocks for the BHV_Agent . This behavior is one that does the actual connection to python land through a TCP socket. ManagerExample Then, focus on the python side of the more complex \"QTable\" mission bellow.","title":"If you are coming from MOOS-IvP"},{"location":"getting_started/#if-you-said-what-is-moos-ivp","text":"Look at the \"QTable\" example. This implements a reinforcement learning q-table . This example is trained on the Project Aquaticus scenario. It's goal is to grab a flag in virtual game of capture flag. QTable If you came from the MOOS-IvP section: The associated MOOS-IvP mission files which are in that directory are based on the moos-ivp-agent's AgentAquaticus which allows for spawning of multiple vehicles in one MOOS-IvP simulation during training time. A good config block to look at is that for pEpisodeManager which manages the resetting of vehicles to form episodes of training.","title":"If you said \"What is MOOS-IvP\""},{"location":"getting_started/#hi-joe","text":"","title":"Hi Joe"},{"location":"moos_ivp/","text":"MOOS-IvP Reference BHV_Agent pEpisodeManager uFldFlagManagerAgent uFldTagManagerAgent Missions AgentAquaticus","title":"Index"},{"location":"moos_ivp/#moos-ivp-reference","text":"BHV_Agent pEpisodeManager uFldFlagManagerAgent uFldTagManagerAgent Missions AgentAquaticus","title":"MOOS-IvP Reference"},{"location":"moos_ivp/bhv_agent/","text":"BHV_Agent Note This page will not explain anything about the basics of MOOS-IvP. If you are new and looking for resources on this checkout their homepage . Consider completing the labs associated with MIT 2.680 if you are really serious in your goal to learn MOOS-IvP. Note BHV_Agent has only been tested in scenarios where: It has the maximum pwt out of all behaviors in the mission it is used Has perpetual = true set in it's configuration block Okay fine, a little MOOS-IvP primer Behaviors, are the \"IvP\" part of MOOS-IvP which take in \"MOOS\" variables and produce \"IvP Functions\" which dictate how the robots running MOOS-IvP should behavior. For a good primer see these 2.680 Lecture Slides (2021) . Purpose of BHV_Agent In the case of moos-ivp-agent, BHV_Agent is forwarding all \"MOOS state\" to the python ModelBridgeServer (wrapped by MissionManager ). The python ML models then make decisions on what action a robot running MOOS-IvP and BHV_Agent should take by providing a course and speed and optionally mutate the \"MOOS State\" of the robot by making posts . Configuration Note See the general Helm Autonomy reference for information about configuring behaviors in general. BHV_Agent exports three types of state from MOOS-IvP to python (Automatic): The position of the robot As defined by the NAV_X and NAV_Y moos vars. (Upon subscription): The position of other robots. As supplied by the NODE_REPORT_<VNAME> and pNodeParse (aquaticus) (Upon subscription): Any specified MOOS var Subscribing to vehicle positions The sub_vehicle configuration key is used to subscribe to vehicles based on their name. The following BHV_Agent config block shows a subscription to two vehicles with names evan and felix . Behavior = BHV_Agent { name = agent pwt = 100 perpetual = true condition = MODE == ACTIVE sub_vehicle = evan sub_vehicle = felix } Subscribing to MOOS vars The sub_var configuration key is used to subscribe to MOOS vars based on their state. The following BHV_Agent config block shows a subscription to two vars with names TAGGED and HAS_FLAG . Note As some MOOS-IvP apps have startup delays or do not post vars initially, you cannot assume that vars subscribed to will be immediately available on the python side. You are responsible for checking before you access. Behavior = BHV_Agent { name = agent pwt = 100 perpetual = true condition = MODE == ACTIVE sub_var = TAGGED sub_var = HAS_FLAG } What does state look like in Python Once the state is outputted from MissionManager , it will be in a python dictionary with the following form. All values will be translated into python's string, float, or boolean types (With the exception of the node report dictionaries). >>> msg = mgr.get_message() >>> print(msg.state) { 'NAV_X': 30.5, 'NAV_Y': -75.2, 'TAGGED': False, 'HAS_FLAG': True, 'NODE_REPORTS': { 'evan': { 'NAV_X': -60.3 'NAV_Y': 35.2 }, 'felix': { 'NAV_X': -12.3 'NAV_Y': -54.0 } } } BHV_Agent and pEpisodeManager BHV_Agent will automatically collect data from pEpisodeManager if it is present and forward that data to the python model. See the (MissionMessage)[api_pages/mission_message.md] for information on how to access this.","title":"BHV_Agent"},{"location":"moos_ivp/bhv_agent/#bhv_agent","text":"Note This page will not explain anything about the basics of MOOS-IvP. If you are new and looking for resources on this checkout their homepage . Consider completing the labs associated with MIT 2.680 if you are really serious in your goal to learn MOOS-IvP. Note BHV_Agent has only been tested in scenarios where: It has the maximum pwt out of all behaviors in the mission it is used Has perpetual = true set in it's configuration block","title":"BHV_Agent"},{"location":"moos_ivp/bhv_agent/#okay-fine-a-little-moos-ivp-primer","text":"Behaviors, are the \"IvP\" part of MOOS-IvP which take in \"MOOS\" variables and produce \"IvP Functions\" which dictate how the robots running MOOS-IvP should behavior. For a good primer see these 2.680 Lecture Slides (2021) .","title":"Okay fine, a little MOOS-IvP primer"},{"location":"moos_ivp/bhv_agent/#purpose-of-bhv_agent","text":"In the case of moos-ivp-agent, BHV_Agent is forwarding all \"MOOS state\" to the python ModelBridgeServer (wrapped by MissionManager ). The python ML models then make decisions on what action a robot running MOOS-IvP and BHV_Agent should take by providing a course and speed and optionally mutate the \"MOOS State\" of the robot by making posts .","title":"Purpose of BHV_Agent"},{"location":"moos_ivp/bhv_agent/#configuration","text":"Note See the general Helm Autonomy reference for information about configuring behaviors in general. BHV_Agent exports three types of state from MOOS-IvP to python (Automatic): The position of the robot As defined by the NAV_X and NAV_Y moos vars. (Upon subscription): The position of other robots. As supplied by the NODE_REPORT_<VNAME> and pNodeParse (aquaticus) (Upon subscription): Any specified MOOS var","title":"Configuration"},{"location":"moos_ivp/bhv_agent/#subscribing-to-vehicle-positions","text":"The sub_vehicle configuration key is used to subscribe to vehicles based on their name. The following BHV_Agent config block shows a subscription to two vehicles with names evan and felix . Behavior = BHV_Agent { name = agent pwt = 100 perpetual = true condition = MODE == ACTIVE sub_vehicle = evan sub_vehicle = felix }","title":"Subscribing to vehicle positions"},{"location":"moos_ivp/bhv_agent/#subscribing-to-moos-vars","text":"The sub_var configuration key is used to subscribe to MOOS vars based on their state. The following BHV_Agent config block shows a subscription to two vars with names TAGGED and HAS_FLAG . Note As some MOOS-IvP apps have startup delays or do not post vars initially, you cannot assume that vars subscribed to will be immediately available on the python side. You are responsible for checking before you access. Behavior = BHV_Agent { name = agent pwt = 100 perpetual = true condition = MODE == ACTIVE sub_var = TAGGED sub_var = HAS_FLAG }","title":"Subscribing to MOOS vars"},{"location":"moos_ivp/bhv_agent/#what-does-state-look-like-in-python","text":"Once the state is outputted from MissionManager , it will be in a python dictionary with the following form. All values will be translated into python's string, float, or boolean types (With the exception of the node report dictionaries). >>> msg = mgr.get_message() >>> print(msg.state) { 'NAV_X': 30.5, 'NAV_Y': -75.2, 'TAGGED': False, 'HAS_FLAG': True, 'NODE_REPORTS': { 'evan': { 'NAV_X': -60.3 'NAV_Y': 35.2 }, 'felix': { 'NAV_X': -12.3 'NAV_Y': -54.0 } } }","title":"What does state look like in Python"},{"location":"moos_ivp/bhv_agent/#bhv_agent-and-pepisodemanager","text":"BHV_Agent will automatically collect data from pEpisodeManager if it is present and forward that data to the python model. See the (MissionMessage)[api_pages/mission_message.md] for information on how to access this.","title":"BHV_Agent and pEpisodeManager"},{"location":"moos_ivp/episode_manager/","text":"pEpisodeManager Note This page will not explain anything about the basics of MOOS-IvP. If you are new and looking for resources on this checkout their homepage . Consider completing the labs associated with MIT 2.680 if you are really serious in your goal to learn MOOS-IvP. Purpose of pEpisodeManager In training of ML agents it is often desirable to split training experience into episodes that end in either success or failure. pEpisodeManager provides the capability to reset vehicles when some conditions are meet. This prevents the need to shutdown the vehicle between episodes (a expensive process). The demo below shows pEpisodeManager running during training of an agent in the AgentAquaticus mission. This mission is configured to reset agents to their home flag when they successfully capture the flag OR when they go out of bounds. Configuration There are four main components to configuring a instance of pEpisodeManager. Reset position Configuring success conditions Configuring failure conditions Reset position Note Currently, the only supported reset depth is 0. MOOS-IvP Agent is not currently compatible with submersible missions. For the basic functionality of pEpisodeManager to work, you must tell the manager where to reset the vehicle when. The following config block shows the proper usage of the reset_pos config variable where x=50 , y=-24 , and heading=240 . ProcessConfig = pEpisodeManager { AppTick = 4 CommsTick = 4 reset_pos = 50,-24,240 } If the following pEpisodeManager was started it would not reset the vehicle as it does not know when to do so. See bellow for configuration of success and failure conditions. Success & failure conditions For the manager to know when it should reset the vehicle (or equivalently when episodes should end), we need to do one of two things. Specify configuration variables for success & failure conditions. Trigger reset directly via a post to the EPISODE_MGR_CTRL moos var. This section will follow the configuration method. See below for the usage of EPISODE_MGR_CTRL. Reminder For pEpisodeManager to have access to a MOOS var it must either originate from an app also running on that vehicle or be forwarded from another vehicle. Forwarding is usually done via uFldNodeBroker or uFldShoreBroker . The following configuration block is made for Project Aquaticus and shows proper usage of the end_success_condition and end_failure_condition . The resulting behavior will be for the vehicle to reset when either tagged or in possession of the virtual flag. ProcessConfig = pEpisodeManager { AppTick = 4 CommsTick = 4 end_success_condition = (HAS_FLAG = true) end_failure_condition = (TAGGED = true) reset_pos = 50,-24,240 } More complex conditions can be specified using this format . If multiple end_success_condition or end_failure_condition lines are specified then pEpisodeManager will treat the relationship between them as an AND clause. State Transition Posts There are three state transitions which can be configured to post specified MOOS vars. The following config block shows the correct usage of the configuration variables. ProcessConfig = pEpisodeManager { AppTick = 4 CommsTick = 4 end_success_condition = (HAS_FLAG = true) end_failure_condition = (TAGGED = true) reset_pos = 50,-24,240 start_post = var=MY_VAR,val=now_starting reset_post = var=UNTAG_REQUEST,val=vname=$(VNAME) reset_post = var=MY_VAR,val=now_resetting pause_post = var=MY_VAR,val=now_pausing } TODO: Explain TODO: Max duration State & Transitions Overview There are four states which pEpisodeManager can be in. These states will be posted to the EPISODE_MGR_STATE MOOS var - RUNNING This is the main state, where MOOS variables are consumed to check if either end_success_condition s or end_failure_conditions s are satisfied at which point a state transition to STOPPING_HELM is triggered. Alternatively the vehicle can be reset through the EPISODE_MGR_STATE or by reaching the max_duration specified in the config. - STOPPING_HELM This state is used to wait for the IVPHELM_STATE MOOS var to enter the PARK state indicating that the vehicle will not be attempting to navigate during which is useful for the next state RESETING . - RESETING (working on the spelling) This state is used to wait for the vehicles NAV_X and NAV_Y to be in some tolerance of the configured reset_pos . After this condition is meet pEpisodeManager will check if a pause has been requested by use of EPISODE_MGR_STATE see here . If a pause has been requested the next state will be PAUSED and otherwise it will continue to the RUNNING state. - PAUSED Used to stop keep vehicles stopped until a EPISODE_MGR_CTRL post is made indicating that it should be started and transition to the RUNNING state. Using EPISODE_MGR_CTRL It can be useful to manually trigger state change in pEpisodeManager via a MOOS var post. For this reason pEpisodeManager listens on the EPISODE_MGR_CTRL variable. There are three \"actions\" which can be triggered via this method. start : Used when pEpisodeManager is in the PAUSED state to transition to RUNNING . hardstop : Immediately stop the current episode and enter the PAUSED state after resetting. Will report the episode as a failure in the episode report. reset : Immediately end the current episode. The state of success / failure can be set in the EPISODE_MGR_CTRL post. pause : After the current episode ends, enter the PAUSED state. These actions can be triggered by making a post where type= is followed by one of these action's names. For example, the following command uses the uPokeDB utility to make post causing the pEpisodeManager to come to a paused state after the current episode. uPokeDB alpha.moos EPISODE_MGR_CTRL=type=pause The reset can take an additional argument which specifies what value should be reported for the success state. uPokeDB alpha.moos EPISODE_MGR_CTRL=type=pause,success=true The MissionMessage python wrapper provides a pythonic way of trigging these posts. Episode Reports To report of the success / failure of each episode pEpisodeManager will post to the EPISODE_MGR_REPORT a comma separated key/value pairs. This are also helpful for debugging. The bellow is an example of one such report. NUM=8,SUCCESS=true,DURATION=122.0297,WILL_PAUSE=false These reports are automatically forwarded by BHV_Agent without any need for further configuration. In python MissionMessage will parse these into easily accessible variables. How it works TODO - Logic Conditions - USIM reset","title":"pEpisodeManager"},{"location":"moos_ivp/episode_manager/#pepisodemanager","text":"Note This page will not explain anything about the basics of MOOS-IvP. If you are new and looking for resources on this checkout their homepage . Consider completing the labs associated with MIT 2.680 if you are really serious in your goal to learn MOOS-IvP.","title":"pEpisodeManager"},{"location":"moos_ivp/episode_manager/#purpose-of-pepisodemanager","text":"In training of ML agents it is often desirable to split training experience into episodes that end in either success or failure. pEpisodeManager provides the capability to reset vehicles when some conditions are meet. This prevents the need to shutdown the vehicle between episodes (a expensive process). The demo below shows pEpisodeManager running during training of an agent in the AgentAquaticus mission. This mission is configured to reset agents to their home flag when they successfully capture the flag OR when they go out of bounds.","title":"Purpose of pEpisodeManager"},{"location":"moos_ivp/episode_manager/#configuration","text":"There are four main components to configuring a instance of pEpisodeManager. Reset position Configuring success conditions Configuring failure conditions","title":"Configuration"},{"location":"moos_ivp/episode_manager/#reset-position","text":"Note Currently, the only supported reset depth is 0. MOOS-IvP Agent is not currently compatible with submersible missions. For the basic functionality of pEpisodeManager to work, you must tell the manager where to reset the vehicle when. The following config block shows the proper usage of the reset_pos config variable where x=50 , y=-24 , and heading=240 . ProcessConfig = pEpisodeManager { AppTick = 4 CommsTick = 4 reset_pos = 50,-24,240 } If the following pEpisodeManager was started it would not reset the vehicle as it does not know when to do so. See bellow for configuration of success and failure conditions.","title":"Reset position"},{"location":"moos_ivp/episode_manager/#success-failure-conditions","text":"For the manager to know when it should reset the vehicle (or equivalently when episodes should end), we need to do one of two things. Specify configuration variables for success & failure conditions. Trigger reset directly via a post to the EPISODE_MGR_CTRL moos var. This section will follow the configuration method. See below for the usage of EPISODE_MGR_CTRL. Reminder For pEpisodeManager to have access to a MOOS var it must either originate from an app also running on that vehicle or be forwarded from another vehicle. Forwarding is usually done via uFldNodeBroker or uFldShoreBroker . The following configuration block is made for Project Aquaticus and shows proper usage of the end_success_condition and end_failure_condition . The resulting behavior will be for the vehicle to reset when either tagged or in possession of the virtual flag. ProcessConfig = pEpisodeManager { AppTick = 4 CommsTick = 4 end_success_condition = (HAS_FLAG = true) end_failure_condition = (TAGGED = true) reset_pos = 50,-24,240 } More complex conditions can be specified using this format . If multiple end_success_condition or end_failure_condition lines are specified then pEpisodeManager will treat the relationship between them as an AND clause.","title":"Success &amp; failure conditions"},{"location":"moos_ivp/episode_manager/#state-transition-posts","text":"There are three state transitions which can be configured to post specified MOOS vars. The following config block shows the correct usage of the configuration variables. ProcessConfig = pEpisodeManager { AppTick = 4 CommsTick = 4 end_success_condition = (HAS_FLAG = true) end_failure_condition = (TAGGED = true) reset_pos = 50,-24,240 start_post = var=MY_VAR,val=now_starting reset_post = var=UNTAG_REQUEST,val=vname=$(VNAME) reset_post = var=MY_VAR,val=now_resetting pause_post = var=MY_VAR,val=now_pausing } TODO: Explain","title":"State Transition Posts"},{"location":"moos_ivp/episode_manager/#todo-max-duration","text":"","title":"TODO: Max duration"},{"location":"moos_ivp/episode_manager/#state-transitions","text":"","title":"State &amp; Transitions"},{"location":"moos_ivp/episode_manager/#overview","text":"There are four states which pEpisodeManager can be in. These states will be posted to the EPISODE_MGR_STATE MOOS var","title":"Overview"},{"location":"moos_ivp/episode_manager/#-running","text":"This is the main state, where MOOS variables are consumed to check if either end_success_condition s or end_failure_conditions s are satisfied at which point a state transition to STOPPING_HELM is triggered. Alternatively the vehicle can be reset through the EPISODE_MGR_STATE or by reaching the max_duration specified in the config.","title":"- RUNNING"},{"location":"moos_ivp/episode_manager/#-stopping_helm","text":"This state is used to wait for the IVPHELM_STATE MOOS var to enter the PARK state indicating that the vehicle will not be attempting to navigate during which is useful for the next state RESETING .","title":"- STOPPING_HELM"},{"location":"moos_ivp/episode_manager/#-reseting-working-on-the-spelling","text":"This state is used to wait for the vehicles NAV_X and NAV_Y to be in some tolerance of the configured reset_pos . After this condition is meet pEpisodeManager will check if a pause has been requested by use of EPISODE_MGR_STATE see here . If a pause has been requested the next state will be PAUSED and otherwise it will continue to the RUNNING state.","title":"- RESETING (working on the spelling)"},{"location":"moos_ivp/episode_manager/#-paused","text":"Used to stop keep vehicles stopped until a EPISODE_MGR_CTRL post is made indicating that it should be started and transition to the RUNNING state.","title":"- PAUSED"},{"location":"moos_ivp/episode_manager/#using-episode_mgr_ctrl","text":"It can be useful to manually trigger state change in pEpisodeManager via a MOOS var post. For this reason pEpisodeManager listens on the EPISODE_MGR_CTRL variable. There are three \"actions\" which can be triggered via this method. start : Used when pEpisodeManager is in the PAUSED state to transition to RUNNING . hardstop : Immediately stop the current episode and enter the PAUSED state after resetting. Will report the episode as a failure in the episode report. reset : Immediately end the current episode. The state of success / failure can be set in the EPISODE_MGR_CTRL post. pause : After the current episode ends, enter the PAUSED state. These actions can be triggered by making a post where type= is followed by one of these action's names. For example, the following command uses the uPokeDB utility to make post causing the pEpisodeManager to come to a paused state after the current episode. uPokeDB alpha.moos EPISODE_MGR_CTRL=type=pause The reset can take an additional argument which specifies what value should be reported for the success state. uPokeDB alpha.moos EPISODE_MGR_CTRL=type=pause,success=true The MissionMessage python wrapper provides a pythonic way of trigging these posts.","title":"Using EPISODE_MGR_CTRL"},{"location":"moos_ivp/episode_manager/#episode-reports","text":"To report of the success / failure of each episode pEpisodeManager will post to the EPISODE_MGR_REPORT a comma separated key/value pairs. This are also helpful for debugging. The bellow is an example of one such report. NUM=8,SUCCESS=true,DURATION=122.0297,WILL_PAUSE=false These reports are automatically forwarded by BHV_Agent without any need for further configuration. In python MissionMessage will parse these into easily accessible variables.","title":"Episode Reports"},{"location":"moos_ivp/episode_manager/#how-it-works","text":"TODO - Logic Conditions - USIM reset","title":"How it works"},{"location":"python/","text":"Python API Reference MissionManager MissionMessage Aquaticus FieldDiscretizer","title":"Index"},{"location":"python/#python-api-reference","text":"MissionManager MissionMessage Aquaticus FieldDiscretizer","title":"Python API Reference"},{"location":"python/mission_manager/","text":"Reference for MissionManager This is the primary method for interfacing with moos-ivp-agent's BHV_Agent Examples: It is recommended to use MissionManager with the python context manager from mivp_agent.manager import MissionManager with MissionManager() as mgr: mgr.wait_for(['felix', 'evan']) ... are_present ( self , vnames ) Used to see if a specified list of vehicles has connected to the MissionManager instance yet. See also: wait_for() Parameters: Name Type Description Default vnames iterable A list / tuple of str values to look for required Source code in mivp_agent/manager.py def are_present ( self , vnames ): ''' Used to see if a specified list of vehicles has connected to the `MissionManager` instance yet. See also: [`wait_for()`][mivp_agent.manager.MissionManager.wait_for] Args: vnames (iterable): A list / tuple of `str` values to look for ''' for vname in vnames : with self . _vname_lock : if vname not in self . _vnames : return False return True episode_nums ( self ) Returns: Type Description dict A key, value pair maping vnames to the episode numbers of the pEpisodeManager app on that vehicle Source code in mivp_agent/manager.py def episode_nums ( self ): ''' Returns: dict: A key, value pair maping vnames to the episode numbers of the `pEpisodeManager` app on that vehicle ''' with self . _emn_lock : return self . _episode_manager_nums . copy () episode_state ( self , vname ) This is used to interrogate the state of a connected vehicle's pEpisodeManager Parameters: Name Type Description Default vname str the vname of the vehicle required Returns: Type Description str The state of the pEpisodeManager on the vehicle Source code in mivp_agent/manager.py def episode_state ( self , vname ): ''' This is used to interrogate the state of a connected vehicle's `pEpisodeManager` Args: vname (str): the vname of the vehicle Returns: str: The state of the `pEpisodeManager` on the vehicle ''' with self . _ems_lock : # Should be all strings so no reference odd ness return self . _episode_manager_states [ vname ] get_message ( self , block = True ) Used as the primary method for receiving data from BHV_Agent . NOTE: Messages MUST be responded to as BHV_Agent will not send another update until it has a response to the last. Parameters: Name Type Description Default block bool A boolean specifying if the method will wait until a message present or return immediately True Returns: Type Description obj A instance of MissionMessage() or None depending on the blocking behavior Examples: msg = mgr.get_message() NAV_X = msg.state['NAV_X'] NAV_Y = msg.state['NAV_Y'] # ... # Some processing # ... msg.act({ 'speed': 1.0 'course': 180.0 }) Source code in mivp_agent/manager.py def get_message ( self , block = True ): ''' Used as the primary method for receiving data from `BHV_Agent`. **NOTE:** Messages **MUST** be responded to as `BHV_Agent` will not send another update until it has a response to the last. Args: block (bool): A boolean specifying if the method will wait until a message present or return immediately Returns: obj: A instance of [`MissionMessage()`][mivp_agent.manager.MissionMessage] or `None` depending on the blocking behavior Example: ``` msg = mgr.get_message() NAV_X = msg.state['NAV_X'] NAV_Y = msg.state['NAV_Y'] # ... # Some processing # ... msg.act({ 'speed': 1.0 'course': 180.0 }) ``` ''' return self . _msg_queue . get ( block = block ) get_vehicle_count ( self ) Returns: Type Description int The amount of vehicles that have connected to this instance of MissionManager Source code in mivp_agent/manager.py def get_vehicle_count ( self ): ''' Returns: int: The amount of vehicles that have connected to this instance of `MissionManager` ''' return self . _vehicle_count start ( self ) It is not recommended to use this method directly. Instead, consider using this class with the python context manager. This method starts a thread to read from the ModelBridgeServer . Returns: Type Description bool False if thread has already been started, True otherwise Source code in mivp_agent/manager.py def start ( self ): ''' It is **not recommended** to use this method directly. Instead, consider using this class with the python context manager. This method starts a thread to read from the `ModelBridgeServer`. Returns: bool: False if thread has already been started, True otherwise ''' if self . _thread is not None : return False self . _thread = Thread ( target = self . _server_thread , daemon = True ) self . _thread . start () return True wait_for ( self , vnames , sleep = 0.1 ) Used to block until a specified list of vehicles has connect to the MissionManager instance. Parameters: Name Type Description Default vnames iterable A list / tuple of str values to look for required sleep float Amount of time in seconds to sleep for between checks 0.1 Source code in mivp_agent/manager.py def wait_for ( self , vnames , sleep = 0.1 ): ''' Used to block until a specified list of vehicles has connect to the `MissionManager` instance. Args: vnames (iterable): A list / tuple of `str` values to look for sleep (float): Amount of time in seconds to sleep for between checks ''' while not self . are_present ( vnames ): time . sleep ( sleep )","title":"MissionManager"},{"location":"python/mission_manager/#reference-for-missionmanager","text":"This is the primary method for interfacing with moos-ivp-agent's BHV_Agent Examples: It is recommended to use MissionManager with the python context manager from mivp_agent.manager import MissionManager with MissionManager() as mgr: mgr.wait_for(['felix', 'evan']) ...","title":"Reference for MissionManager"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.are_present","text":"Used to see if a specified list of vehicles has connected to the MissionManager instance yet. See also: wait_for() Parameters: Name Type Description Default vnames iterable A list / tuple of str values to look for required Source code in mivp_agent/manager.py def are_present ( self , vnames ): ''' Used to see if a specified list of vehicles has connected to the `MissionManager` instance yet. See also: [`wait_for()`][mivp_agent.manager.MissionManager.wait_for] Args: vnames (iterable): A list / tuple of `str` values to look for ''' for vname in vnames : with self . _vname_lock : if vname not in self . _vnames : return False return True","title":"are_present()"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.episode_nums","text":"Returns: Type Description dict A key, value pair maping vnames to the episode numbers of the pEpisodeManager app on that vehicle Source code in mivp_agent/manager.py def episode_nums ( self ): ''' Returns: dict: A key, value pair maping vnames to the episode numbers of the `pEpisodeManager` app on that vehicle ''' with self . _emn_lock : return self . _episode_manager_nums . copy ()","title":"episode_nums()"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.episode_state","text":"This is used to interrogate the state of a connected vehicle's pEpisodeManager Parameters: Name Type Description Default vname str the vname of the vehicle required Returns: Type Description str The state of the pEpisodeManager on the vehicle Source code in mivp_agent/manager.py def episode_state ( self , vname ): ''' This is used to interrogate the state of a connected vehicle's `pEpisodeManager` Args: vname (str): the vname of the vehicle Returns: str: The state of the `pEpisodeManager` on the vehicle ''' with self . _ems_lock : # Should be all strings so no reference odd ness return self . _episode_manager_states [ vname ]","title":"episode_state()"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.get_message","text":"Used as the primary method for receiving data from BHV_Agent . NOTE: Messages MUST be responded to as BHV_Agent will not send another update until it has a response to the last. Parameters: Name Type Description Default block bool A boolean specifying if the method will wait until a message present or return immediately True Returns: Type Description obj A instance of MissionMessage() or None depending on the blocking behavior Examples: msg = mgr.get_message() NAV_X = msg.state['NAV_X'] NAV_Y = msg.state['NAV_Y'] # ... # Some processing # ... msg.act({ 'speed': 1.0 'course': 180.0 }) Source code in mivp_agent/manager.py def get_message ( self , block = True ): ''' Used as the primary method for receiving data from `BHV_Agent`. **NOTE:** Messages **MUST** be responded to as `BHV_Agent` will not send another update until it has a response to the last. Args: block (bool): A boolean specifying if the method will wait until a message present or return immediately Returns: obj: A instance of [`MissionMessage()`][mivp_agent.manager.MissionMessage] or `None` depending on the blocking behavior Example: ``` msg = mgr.get_message() NAV_X = msg.state['NAV_X'] NAV_Y = msg.state['NAV_Y'] # ... # Some processing # ... msg.act({ 'speed': 1.0 'course': 180.0 }) ``` ''' return self . _msg_queue . get ( block = block )","title":"get_message()"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.get_vehicle_count","text":"Returns: Type Description int The amount of vehicles that have connected to this instance of MissionManager Source code in mivp_agent/manager.py def get_vehicle_count ( self ): ''' Returns: int: The amount of vehicles that have connected to this instance of `MissionManager` ''' return self . _vehicle_count","title":"get_vehicle_count()"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.start","text":"It is not recommended to use this method directly. Instead, consider using this class with the python context manager. This method starts a thread to read from the ModelBridgeServer . Returns: Type Description bool False if thread has already been started, True otherwise Source code in mivp_agent/manager.py def start ( self ): ''' It is **not recommended** to use this method directly. Instead, consider using this class with the python context manager. This method starts a thread to read from the `ModelBridgeServer`. Returns: bool: False if thread has already been started, True otherwise ''' if self . _thread is not None : return False self . _thread = Thread ( target = self . _server_thread , daemon = True ) self . _thread . start () return True","title":"start()"},{"location":"python/mission_manager/#mivp_agent.manager.MissionManager.wait_for","text":"Used to block until a specified list of vehicles has connect to the MissionManager instance. Parameters: Name Type Description Default vnames iterable A list / tuple of str values to look for required sleep float Amount of time in seconds to sleep for between checks 0.1 Source code in mivp_agent/manager.py def wait_for ( self , vnames , sleep = 0.1 ): ''' Used to block until a specified list of vehicles has connect to the `MissionManager` instance. Args: vnames (iterable): A list / tuple of `str` values to look for sleep (float): Amount of time in seconds to sleep for between checks ''' while not self . are_present ( vnames ): time . sleep ( sleep )","title":"wait_for()"},{"location":"python/mission_message/","text":"Reference for MissionMessage This class is used to parse incoming messages into attributes (see bellow) and provide a simple interface for responding to each message. IMPORTANT NOTE: Messages MUST be responded by one of the following methods to as BHV_Agent will not send another update until it has a response to the last. act(action) <---- Most common request_new() start() pause() stop() Attributes: Name Type Description vname str The vehicle's name which generated the message. state dict A dictionary containing key, value pairs of MOOS vars and their associated value at the time the message was created by BHV_Agent . episode_report dict or None If pEpisodeManager is present on the vehicle this message will contain any \"report\" generated by it at the end of episodes. If no pEpisodeManager is present, the value will be None . episode_state str or None If pEpisodeManager is present on the vehicle this message will be the state which that app is broadcasting. Otherwise, it will be None . act ( self , action ) This is used to send an action for the BHV_Agent to execute. Parameters: Name Type Description Default action dict An action to send (see below) required Examples: Actions submitted through MissionMessage are python dictionaries with the following required fields. msg.act({ 'speed': 1.0 'course': 180.0 }) Examples: Optionally, one can add a MOOS var and value they would like to post. msg.act({ 'speed': 0.0 'course': 0.0 'posts': { 'ACTION': 'ATTACK_LEFT' }, }) Source code in mivp_agent/manager.py def act ( self , action ): ''' This is used to send an action for the `BHV_Agent` to execute. Args: action (dict): An action to send (see below) Example: Actions submitted through `MissionMessage` are python dictionaries with the following **required** fields. ``` msg.act({ 'speed': 1.0 'course': 180.0 }) ``` Example: Optionally, one can add a MOOS var and value they would like to post. ``` msg.act({ 'speed': 0.0 'course': 0.0 'posts': { 'ACTION': 'ATTACK_LEFT' }, }) ``` ''' self . _assert_no_rsp () # Copy so we don't run into threading errors if client reuses the action dict instr = action . copy () if 'posts' not in action : instr [ 'posts' ] = {} validateAction ( instr ) instr [ 'ctrl_msg' ] = 'SEND_STATE' with self . _rsp_lock : self . _response = instr pause ( self ) This method is used to send a message to pEpisodeManager to pause after the current episode. The following messagewill be constructed and dispatched. { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=pause' }, } Source code in mivp_agent/manager.py def pause ( self ): ''' This method is used to send a message to `pEpisodeManager` to **pause** after the current episode. The following messagewill be constructed and dispatched. ``` { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=pause' }, } ``` ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_PAUSE request_new ( self ) This method is used to send ask BHV_Agent to send another action. Source code in mivp_agent/manager.py def request_new ( self ): ''' This method is used to send ask `BHV_Agent` to send another action. ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_SEND_STATE start ( self ) This method is used to send a message to pEpisodeManager to start an episode. The following message will be constructed and dispatched. { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=start' }, } Source code in mivp_agent/manager.py def start ( self ): ''' This method is used to send a message to `pEpisodeManager` to **start** an episode. The following message will be constructed and dispatched. ``` { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=start' }, } ``` ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_START stop ( self ) This method is used to send a message to pEpisodeManager to hardstop an episode immediately. The following messagewill be constructed and dispatched. { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=hardstop' }, } Source code in mivp_agent/manager.py def stop ( self ): ''' This method is used to send a message to `pEpisodeManager` to **hardstop** an episode immediately. The following messagewill be constructed and dispatched. ``` { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=hardstop' }, } ``` ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_STOP","title":"MissionMessage"},{"location":"python/mission_message/#reference-for-missionmessage","text":"This class is used to parse incoming messages into attributes (see bellow) and provide a simple interface for responding to each message. IMPORTANT NOTE: Messages MUST be responded by one of the following methods to as BHV_Agent will not send another update until it has a response to the last. act(action) <---- Most common request_new() start() pause() stop() Attributes: Name Type Description vname str The vehicle's name which generated the message. state dict A dictionary containing key, value pairs of MOOS vars and their associated value at the time the message was created by BHV_Agent . episode_report dict or None If pEpisodeManager is present on the vehicle this message will contain any \"report\" generated by it at the end of episodes. If no pEpisodeManager is present, the value will be None . episode_state str or None If pEpisodeManager is present on the vehicle this message will be the state which that app is broadcasting. Otherwise, it will be None .","title":"Reference for MissionMessage"},{"location":"python/mission_message/#mivp_agent.manager.MissionMessage.act","text":"This is used to send an action for the BHV_Agent to execute. Parameters: Name Type Description Default action dict An action to send (see below) required Examples: Actions submitted through MissionMessage are python dictionaries with the following required fields. msg.act({ 'speed': 1.0 'course': 180.0 }) Examples: Optionally, one can add a MOOS var and value they would like to post. msg.act({ 'speed': 0.0 'course': 0.0 'posts': { 'ACTION': 'ATTACK_LEFT' }, }) Source code in mivp_agent/manager.py def act ( self , action ): ''' This is used to send an action for the `BHV_Agent` to execute. Args: action (dict): An action to send (see below) Example: Actions submitted through `MissionMessage` are python dictionaries with the following **required** fields. ``` msg.act({ 'speed': 1.0 'course': 180.0 }) ``` Example: Optionally, one can add a MOOS var and value they would like to post. ``` msg.act({ 'speed': 0.0 'course': 0.0 'posts': { 'ACTION': 'ATTACK_LEFT' }, }) ``` ''' self . _assert_no_rsp () # Copy so we don't run into threading errors if client reuses the action dict instr = action . copy () if 'posts' not in action : instr [ 'posts' ] = {} validateAction ( instr ) instr [ 'ctrl_msg' ] = 'SEND_STATE' with self . _rsp_lock : self . _response = instr","title":"act()"},{"location":"python/mission_message/#mivp_agent.manager.MissionMessage.pause","text":"This method is used to send a message to pEpisodeManager to pause after the current episode. The following messagewill be constructed and dispatched. { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=pause' }, } Source code in mivp_agent/manager.py def pause ( self ): ''' This method is used to send a message to `pEpisodeManager` to **pause** after the current episode. The following messagewill be constructed and dispatched. ``` { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=pause' }, } ``` ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_PAUSE","title":"pause()"},{"location":"python/mission_message/#mivp_agent.manager.MissionMessage.request_new","text":"This method is used to send ask BHV_Agent to send another action. Source code in mivp_agent/manager.py def request_new ( self ): ''' This method is used to send ask `BHV_Agent` to send another action. ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_SEND_STATE","title":"request_new()"},{"location":"python/mission_message/#mivp_agent.manager.MissionMessage.start","text":"This method is used to send a message to pEpisodeManager to start an episode. The following message will be constructed and dispatched. { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=start' }, } Source code in mivp_agent/manager.py def start ( self ): ''' This method is used to send a message to `pEpisodeManager` to **start** an episode. The following message will be constructed and dispatched. ``` { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=start' }, } ``` ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_START","title":"start()"},{"location":"python/mission_message/#mivp_agent.manager.MissionMessage.stop","text":"This method is used to send a message to pEpisodeManager to hardstop an episode immediately. The following messagewill be constructed and dispatched. { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=hardstop' }, } Source code in mivp_agent/manager.py def stop ( self ): ''' This method is used to send a message to `pEpisodeManager` to **hardstop** an episode immediately. The following messagewill be constructed and dispatched. ``` { 'speed': 0.0, 'course': 0.0, 'posts': { 'EPISODE_MGR_CTRL': 'type=hardstop' }, } ``` ''' self . _assert_no_rsp () with self . _rsp_lock : self . _response = INSTR_STOP","title":"stop()"}]}